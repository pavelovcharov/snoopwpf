<!--
(c) Copyright Cory Plotts.
This source is subject to the Microsoft Public License (Ms-PL).
Please see http://go.microsoft.com/fwlink/?LinkID=131993 for details.
All other rights reserved.
-->
<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:input="clr-namespace:System.Windows.Input;assembly=PresentationCore"
    xmlns:my="clr-namespace:Snoop"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    x:Class="Snoop.AppChooser"
    Icon="Snoop.ico"
    Title="Snoop"
    SizeToContent="Width"
    Height="26"
    ResizeMode="NoResize"
    MouseLeftButtonDown="HandleMouseLeftButtonDown"
    SnapsToDevicePixels="False"
    AllowsTransparency="True"
    WindowStyle="None"
    Topmost="True"
    Background="{x:Null}"
    Foreground="{x:Null}"
    Style="{DynamicResource windowStyle}"
    DataContext="{Binding RelativeSource={RelativeSource Self}}">
    <Window.Resources>
        <!-- mouseOverBackgroundBrush -->
        <RadialGradientBrush x:Key="mouseOverBackgroundBrush">
            <GradientStop Color="#FFE3E5F0" Offset="0.439" />
            <GradientStop Color="#FFB2E3FF" Offset="1" />
        </RadialGradientBrush>

        <!-- glassyGradientBrush -->
        <LinearGradientBrush x:Key="glassyGradientBrush" EndPoint="0.25,0.067" StartPoint="0.75,0.933">
            <GradientStop Color="#FF329CA5" Offset="0" />
            <GradientStop Color="#FFAEF2FA" Offset="1" />
        </LinearGradientBrush>

        <!-- blueSteelGradientBrush -->
        <LinearGradientBrush x:Key="blueSteelGradientBrush" EndPoint="0.501,-0.007" StartPoint="0.501,1.007">
            <GradientStop Color="#FF0B9FF2" Offset="0.787" />
            <GradientStop Color="#FF007674" Offset="0" />
            <GradientStop Color="#FF004468" Offset="0.257" />
            <GradientStop Color="#FF004970" Offset="0.251" />
            <GradientStop Color="#FF014F79" Offset="0.421" />
            <GradientStop Color="#FF036194" Offset="1" />
        </LinearGradientBrush>


        <!-- checkBoxStyle -->
        <Style x:Key="checkBoxStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="SnapsToDevicePixels" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}" />
            <Setter Property="Background" Value="{DynamicResource NormalBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource NormalBorderBrush}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Grid Width="13" Height="13">
                                    <Border x:Name="Border" Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{TemplateBinding BorderThickness}" />
                                    <Path x:Name="CheckMark" Stroke="{DynamicResource GlyphBrush}" StrokeThickness="2"
                                          SnapsToDevicePixels="False" Data="M 3 3 L 10 10 M 3 10 L 10 3" />
                                </Grid>
                            </BulletDecorator.Bullet>
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              RecognizesAccessKey="True" />
                        </BulletDecorator>
                        <!-- This uses Visibility to hide and show the CheckMark on IsChecked -->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" Value="{DynamicResource MouseOverBrush}"
                                        TargetName="Border" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" Value="{DynamicResource PressedBrush}"
                                        TargetName="Border" />
                                <Setter Property="BorderBrush" Value="{DynamicResource PressedBorderBrush}"
                                        TargetName="Border" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" Value="{DynamicResource DisabledBackgroundBrush}"
                                        TargetName="Border" />
                                <Setter Property="BorderBrush" Value="{DynamicResource DisabledBorderBrush}"
                                        TargetName="Border" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <!-- windowStyle (that makes the app chooser look selected/activated) -->
        <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type Window}">
            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                <Grid>
                    <AdornerDecorator>
                        <ContentPresenter />
                    </AdornerDecorator>
                    <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom"
                                IsTabStop="false" Visibility="Collapsed" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                        <Condition Property="WindowState" Value="Normal" />
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible" />
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="windowStyle" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <AdornerDecorator>
                                <Grid>
                                    <ContentPresenter />
                                    <Rectangle
                                        x:Name="borderHighlight"
                                        Stroke="#FFB2B2B2"
                                        Margin="0,0,1,1"
                                        RadiusX="2"
                                        RadiusY="2"
                                        Visibility="Collapsed" />
                                    <Rectangle
                                        x:Name="fillHighlight"
                                        Fill="#39FFFFFF"
                                        Width="67"
                                        HorizontalAlignment="Left"
                                        Margin="1,1,0,2"
                                        RadiusX="1.5"
                                        RadiusY="1.5"
                                        Visibility="Collapsed" />
                                </Grid>
                            </AdornerDecorator>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                <Setter Property="Visibility" TargetName="borderHighlight" Value="Visible" />
                                <Setter Property="Visibility" TargetName="fillHighlight" Value="Visible" />
                            </Trigger>
                            <Trigger Property="AllowsTransparency" Value="False" />
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="ResizeMode" Value="CanResizeWithGrip">
                    <Setter Property="Template" Value="{StaticResource WindowTemplateKey}" />
                </Trigger>
            </Style.Triggers>
        </Style>

    </Window.Resources>

    <Grid x:Name="grid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="73" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <!-- semi-transparent black background (is this needed?) -->
        <Border
            Grid.ColumnSpan="7"
            Margin="1,1,0,0"
            Background="#66000000"
            CornerRadius="3,3,3,3" />

        <!-- blue steel background -->
        <Border
            Grid.ColumnSpan="7"
            Margin="0,0,1,1"
            Background="{DynamicResource blueSteelGradientBrush}"
            BorderBrush="#66FFFFFF"
            BorderThickness="1,1,1,1"
            CornerRadius="2,2,2,2" />

        <!-- application label -->
        <StackPanel Orientation="Horizontal">
            <TextBlock
                Text="SNOOP"
                Margin="4,0,0,4"
                VerticalAlignment="Center"
                Width="Auto"
                Height="Auto"
                FontSize="18"
                FontWeight="Normal"
                Foreground="#B2FFFFFF"
                TextAlignment="Center"
                IsEnabled="True"
                Opacity="0.745" />
        </StackPanel>

        <!-- magnify button, snoop button, and the crosshairs window finder -->
        <StackPanel
            Grid.Column="3"
            Height="20"
            Margin="8,0,8,0"
            Orientation="Horizontal">
            <!-- snoop button -->
            <!-- crosshairs snoop window finder -->
            <my:WindowFinder Margin="2,0,0,0"
                             ToolTip="Drag and drop this crosshairs over a WPF window in order to Snoop it." />
        </StackPanel>

        <!-- minimizeButton -->
        <Button
            x:Name="minimizeButton"
            Grid.Column="4"
            Width="20"
            Height="20"
            Style="{DynamicResource appChooserMinimizeCloseButtonStyle}"
            ToolTip="Minimize the Snoop Application Chooser."
            Command="{x:Static my:AppChooser.MinimizeCommand}">
            <Path
                Stretch="Fill"
                Stroke="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}"
                StrokeThickness="3"
                Margin="3"
                Data="M0,0 L1,0"
                Canvas.Left="4"
                Canvas.Top="4"
                SnapsToDevicePixels="True" />
        </Button>

        <!-- closeButton -->
        <Button
            x:Name="closeButton"
            Grid.Column="5"
            Width="20"
            Height="20"
            Margin="2,0,4,0"
            Style="{DynamicResource appChooserMinimizeCloseButtonStyle}"
            ToolTip="Close the Snoop Application Chooser."
            Command="{x:Static input:ApplicationCommands.Close}">
            <Grid>
                <Path
                    Stretch="Fill"
                    Stroke="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}"
                    StrokeThickness="3"
                    Margin="2"
                    Data="M18.33996,8.7972167 L1.8622991,25.274878"
                    Canvas.Left="4"
                    Canvas.Top="4" />
                <Path
                    Stretch="Fill"
                    Stroke="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType=Button}}"
                    StrokeThickness="3"
                    Margin="2"
                    Data="M19.831014,18.751491 L4.5959764,3.5164535"
                    Canvas.Left="4"
                    Canvas.Top="4" />
            </Grid>
        </Button>
    </Grid>
</Window>